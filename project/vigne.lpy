# Stat and Math functions
from math import ceil
from random import uniform
from numpy.random import *

def neg_binom(mu, theta):
  proba = theta/(theta + mu)
  return int(negative_binomial(theta, proba, 1))

# Parameters
extern(ltrunk = 100)
extern(wtrunk = 4)
ramif_left_ratio = 0.96
dl = 2

extern(lhtrunk = 70)
extern(nbtwigs = 6)
extern(wtwigs = 1)

extern(nf1_mean = 21.75)
extern(sfmax_mean = 266)
extern(inmax_mean = 8.14)

leafsmb_surf = 34.63

# Modules
module Leaf
module MainTrunk
module VegTrunk
module PrimaryApex(rank, nf, sfmax, inmax)
module SecondaryApex(rank, nf, lsize, inlength)

Axiom: 
    nproduce [ Plant(0) MainTrunk ]


derivation length: 40
production:

MainTrunk: 
    nproduce _(wtrunk) @Gc SetGuide(souche,ltrunk, True)
    nproduce nF(ltrunk*ramif_left_ratio,dl)
    nproduce [ EndGuide() +(130) /(90) VegTrunk(lhtrunk) ]
    nproduce nF(ltrunk*(1-ramif_left_ratio),dl)
    produce /(-90) VegTrunk(lhtrunk)

VegTrunk(l): # horizontal trunk that generate vegetative growth
  disttwigs = lhtrunk / (nbtwigs)
  for i in range(int(ceil(l/disttwigs))): # loop on internodes
    nproduce F(disttwigs/2 if i == 0 else disttwigs)
    nproduce [@Ge  ,(2) Elasticity(0.1)  
    nproduce  ^(90) /(uniform(0,360)) +(uniform(-60,60)) # orientation
    nproduce  f(wtrunk*0.8) @Gc # move to surface
    # initiate twig
    nproduce _(wtwigs) PrimaryApex(0, nf1_mean, sfmax_mean, inmax_mean) 
    nproduce ]
  nproduce F(disttwigs/2) @O

PrimaryApex(rank, nf, sfmax, inmax): # twigs
  pass # TO COMPLETE


SecondaryApex(rank, nf, lsize, inlength): # secondaire twigs
  pass # TO COMPLETE

interpretation:

PrimaryApex(rank, nf, sfmax, inmax) --> [,(3) @O(2*wtwigs) ]

Leaf(size) :
  s = size/leafsmb_surf
  nproduce [,(2) @Ge Elasticity(0) _(0.005) F(s) { .+(160) f(s). -(90) f(1.6*s). -(120) f(0.75*s). +(90) f(s). -(50) f(0.75*s). -(120) f(1.2*s). +(160) f(s). -(90) f(1.6*s). -(60) f(1.6*s). -(90) f(s) . +(160) f(1.2*s) . -(120) f(0.75*s) . -(50) f(s). +(90) f(0.75*s). -(120) f(1.6*s). -(90) f(s).}(True) ]


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	scalars = [('PRUNING', 'Bool', False), ('MANAGEMENT', 'Bool', False), ('AGRIVOLTAISM', 'Bool', False)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	souche = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.00465839, -0.00310559, 1),(-0.0881766, 0.222898, 1),(0.0691672, 0.359669, 1),(0.0132334, 0.531403, 1),(-0.0889292, 0.640291, 1),(0.0968341, 0.77072, 1),(-0.0415003, 1.00391, 2.12),(0.097053, 1.00566, 1)]) , 
	    stride = 48 , 
	    )
	souche.name = "souche"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('Curve2D',souche)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('souche',souche),]
	context["__parameterset__"] = parameterset
	context["souche"] = souche
